###########################################################
# User guide for prog GroAnold (also named as GDDFAA--Galacdic Dynamics Distribution Function of Angle-Actions of Nbody particles).
###########################################################



## aim
To fit DF of actions of galaxy Nbody particles.
Module 1. contains DICE and Gadget2.
Module 2. contains SCF.
Module 3. contains TACT.
Module 4. contains python modules.



## running
#assume your YAML settings, IDCE settings and Gadget2 settings file lives in:
./initial_conditions/settings_Ein_multicomp_spinL_axisLH/

#run the full pipeline for all models in YAML
#one need open terminal
python3 workflow_wrapper.py ./initial_conditions/settings_Ein_multicomp_spinL_axisLH/ all

#one can leave terminal by nohup
nohup python3 workflow_wrapper.py ./initial_conditions/settings_Ein_multicomp_spinL_axisLH/ all &



## resume
#To resume at a specific point; enable --resume_point would not backup galaxy_general/ or galaxy_general_XXX/ folders.
#resume_point 1. initial condition and simulation only (module 1; stops after simulate)
#resume_point 2. triaxial alignment only (module 2)
#resume_point 3. actions only (module 3)
#resume_point 4. DF fit and plots only (module 4)
#resume_point 5. rename current galaxy folder and continue with the next model(s)
#resume_point 6. compare only (post-run compare step)

#run from example resume point 2 in modelnumber 0 till run to end for all galaxy modelnumers in whole prog (recommanded): run point 2 in modelnumber 1, run point 3 in modelnumber 1, ..., run point 5 in modelnumber 1 (rename galaxy folder (galaxy_general/ as the current) into folder about modelnumber 1); make galaxy folder for modelmuber 3, run point 1 in model number 3, ... (suppose modelnumber 3 is the max number); run point 6 for all modelnumbers (compare models)
python3 workflow_wrapper.py ./initial_conditions/settings_Ein_multicomp_spinL_axisLH/ --resume_point 2 1 --modelnumber 1

#run from example resume point 2 in modelnumber 0 and then exit immediately (debug mode): run point 2 in modelnumber 0, exit the whole prog without any other running
python3 workflow_wrapper.py ./initial_conditions/settings_Ein_multicomp_spinL_axisLH/ --resume_point 2 0 --modelnumber 1



## checking running
#check whether running
jobs -l
ps -aux|egrep 'dice|mpirun|Gadget2|out.exe|data.exe|fit_galaxy_distribution_function.py|plot_action_figs.py'

#kill the controller if detached
kill [the id about workflow_wrapper.py list]











###########################################################
User guide for GroAnold (also named as GDDFAA — Galactic Dynamics Distribution Function of Angle–Actions of N-body particles)
###########################################################

SUMMARY
GroAnold is a four-module pipeline to (1) build initial conditions and run an N-body simulation, (2) align/triaxialize the density and prepare SCF tables, (3) compute actions, and (4) fit a distribution function of actions (DF) and generate plots. The controller is workflow_wrapper.py. You drive everything with a single YAML (unified_settings.yaml) in an initial_conditions/settings_<NAME>/ folder.

This guide explains: directory layout, configuration, how to run end-to-end or resume from any point, background runs, and where outputs appear.



1. DIRECTORY LAYOUT (assumed by the controller)
The controller assumes the project root at:
~/workroom/0prog/GDDFAA_work/

Key subfolders:
install_and_run/ ← run workflow_wrapper.py here
GDDFAA/step1_galaxy_IC_preprocess/
step1_set_IC_DDFA/ ← per-model IC files (.params, .config)
step2_select_generate_IC_DICE/
step2_select_generate_IC_python/
step3_preprocess_IC/step1_from_ascii_to_g1_and_run/
GDDFAA/step2_Nbody_simulation/gadget/
Gadget-2.0.7/galaxy_general/ ← “gm” working folder (created per run)
GDDFAA/step3_actions/ ← SCF + AA tools (TACT etc.)
step2_Data_TACT/aa/
step2_Data_TACT/DataInterface/SCF/
GDDFAA/step4_data_process/data_process/ ← fit_galaxy_distribution_function.py, plot_action_figs.py
initial_conditions/settings_<NAME>/ ← your configuration set
unified_settings.yaml ← single source of truth for a run

Log files:
install_and_run/logs/ ← controller and substep logs
Detach logs and PID:
install_and_run/controller.nohup.log
install_and_run/controller.pid



2. CONFIGURATION: unified_settings.yaml (single source of truth)
All legacy text settings are generated from this YAML. Highlights:

fit:
defaults: &fit_defaults
is_fit_1d: true
fitting_model: fitting_model_MPLF_freq
components:
- type: 1 # halo
<<: *fit_defaults
- type: 2 # stellar disk
<<: *fit_defaults
- type: 0 # gas disk
<<: *fit_defaults
- type: 3 # bulge
<<: *fit_defaults

models:

modelnumber: 0

optional per-model overrides (e.g. flatz1, potential_rotating)
initial_conditions.settings_file: unified_settings.yaml
DICE/Gadget templates live in initial_conditions/settings_<NAME>/

Notes:
• Particle “type” conventions: 1 halo, 2 stellar_disk, 0 gas_disk, 3 bulge.
• fitting_model must match a wrapper in galaxy_models.py (e.g. fitting_model_MPLF_freq or fitting_model_MPLTF_freefixed, etc.). is_fit_1d selects the collapse model (J·Ω vs free-coef combination).
• The controller turns your YAML into user_settings_multi.txt and IC_setting_list.txt automatically at run start.



3. WHAT THE CONTROLLER (workflow wrapper) DOES (modules and steps)
Module 1: initial condition and N-body simulation
build Create/prepare GDDFAA/step2_Nbody_simulation/gadget/Gadget-2.0.7/galaxy_general/
Backs up any existing galaxy_general or galaxy_general_<model> to *_bak_YYYYMMDD_HHMMSS
Writes init/.THIS_IS_FRESH marker and init/model_info.txt.
prepare_ic Generate galaxy_general.g1 with DICE (or cold_python), copy per-model .params/.config/.g1 into gm.
simulate Run Gadget2 via simulate.bat in gm/, produce snapshots into gm/snapshot/

Module 2: triaxiality alignment
triax For selected snapshots: convert_to_txt, run fit_galaxy_distribution_function.py tag=1 (prep),
compile SCF, optionally compute foci, recalc foci tables.
Marks are written under gm/intermediate/ (e.g. triax_###.done).

Module 3: actions calculation
actions Run AA integrator (TACT/aa step2_run.bat). Marks under gm/aa/actions_###.done.

Module 4: DF of actions fitting and plotting
fit_plot For selected snapshots: run fit_galaxy_distribution_function.py tag=2,
then plot_action_figs.py. Fit results are written as legacy TXT plus a JSON sidecar
so plotting does not depend on hard-coded parameter names.

Post-run comparison (optional)
compare Collects some configs into history_runnings_<MODEL0>/ and runs
fit_galaxy_distribution_function.py tag=3 to generate comparison artifacts.

Markers and idempotency:
• Each step writes “.done” markers (e.g. simulate.done, triax_###.done, actions_###.done, fitplot_###.done).
• By default, steps with existing markers are skipped; use --no-skip-existing to redo.



4. QUICK START (end-to-end run)
Assume your YAML lives in:
./initial_conditions/settings_Ein_multicomp_spinL_axisLH/unified_settings.yaml

Run full pipeline for all models defined in the YAML:
python3 workflow_wrapper.py ./initial_conditions/settings_Ein_multicomp_spinL_axisLH/ all

Detach (nohup-like) so you can close the terminal:
python3 workflow_wrapper.py ./initial_conditions/settings_Ein_multicomp_spinL_axisLH/ all --detach
tail -f install_and_run/controller.nohup.log
kill $(cat install_and_run/controller.pid) # to stop the detached controller

Classic nohup alternative:
nohup python3 -u workflow_wrapper.py ./initial_conditions/settings_Ein_multicomp_spinL_axisLH/ all > install_and_run/logs/run_$(date +%F_%H%M%S).log 2>&1 &



5. RESUME AND PARTIAL RUNS
Two mechanisms exist: (A) start/stop gating, and (B) resume_point.

A) Gate specific step ranges
--start-step and --until-step can be any of:
build, prepare_ic, simulate, triax, actions, fit_plot, compare
Example (only simulate):
python3 workflow_wrapper.py ./initial_conditions/settings_Ein_multicomp_spinL_axisLH/ run --start-step simulate --until-step simulate

B) resume_point (shorthand)
--resume_point POINT CONT
POINT in {1,2,3,4,5,6}, CONT in {0,1}
1 run module 1 (IC + simulate)
2 run module 2 (triax)
3 run module 3 (actions)
4 run module 4 (fit + plots)
5 rename current galaxy_general → galaxy_general_<model> (optionally continue to next models)
6 compare only
CONT=0 → run only that module then exit
CONT=1 → resume from that module and continue to the end

Examples:
• Resume from triax only (run module 2 then stop), for model index 0:
python3 workflow_wrapper.py ./initial_conditions/settings_Ein_multicomp_spinL_axisLH/ --resume_point 2 0 --modelnumber 0
• Resume from actions and continue to the end, starting at model index 1:
python3 workflow_wrapper.py ./initial_conditions/settings_Ein_multicomp_spinL_axisLH/ --resume_point 3 1 --modelnumber 1
• Rename current galaxy folder then continue with remaining models:
python3 workflow_wrapper.py ./initial_conditions/settings_Ein_multicomp_spinL_axisLH/ --resume_point 5 1

When --resume_point is provided, the build step will not back up galaxy_general* (that’s intentional so a resume does not rename your active folder again).

Model selection:
• --model <model_name> runs only that named model (must match YAML).
• --modelnumber <idx> (0-based) targets a specific model index (useful with --resume_point).

Skipping and redoing:
• Default is --skip-existing (skip steps that already have .done). Use --no-skip-existing to force recomputation.
• Use --continue-on-error to keep running across snapshots/models if one fails.



6. BACKGROUND RUNS, MONITORING, AND STOPPING
Run in background (built-in):
python3 workflow_wrapper.py <settings_dir> all --detach
tail -f install_and_run/controller.nohup.log
kill $(cat install_and_run/controller.pid)

Classic nohup:
nohup python3 -u workflow_wrapper.py <settings_dir> all > install_and_run/logs/run_$(date +%F_%H%M%S).log 2>&1 &

Check if anything is running:
ps -aux | egrep 'workflow_wrapper.py|mpirun|Gadget2|fit_galaxy_distribution_function.py|plot_action_figs.py'

Graceful stop:
kill <controller_pid>
If ranks are still alive after 5–10 s:
pkill -TERM -f 'Gadget2 .*run.param'
Force stop if stubborn:
pkill -KILL -f 'Gadget2 .*run.param'

Tip: tmux is ideal for interactive long runs:
tmux new -s groanold
python3 workflow_wrapper.py <settings_dir> all
detach with Ctrl-b then d; reattach with tmux attach -t groanold



7. OUTPUTS AND WHERE TO FIND THEM
N-body outputs:
GDDFAA/step2_Nbody_simulation/gadget/Gadget-2.0.7/galaxy_general/
snapshot/ ← snapshot_### files
intermediate/ ← triax markers, foci tables, orbits
aa/ ← actions_###.done markers and AA files
fit/ ← fit results .txt and .json sidecars
init/ ← model_info.txt, .THIS_IS_FRESH marker

Fit results:
• Each fit writes a legacy TXT and a JSON sidecar with enough metadata for plotting. The JSON contains:
fit_params_names and fit_params_values (plotter uses these first).
fitted_params_names_AA and fitted_params_values_AA may also be present (per-AA model payload).
• Plots are saved by plot_action_figs.py into ./savefig/... under GDDFAA/step4_data_process/data_process/

History and compare artifacts:
install_and_run/history_runnings_<MODEL0>/ contains copies of key config files and compare outputs.



8. FIT MODELS AND PARAMETER NAMES
Model selection:
• The fitter reads the YAML fit block and picks per-type fitting_model and is_fit_1d.
• The wrapper in galaxy_models.py returns a dict with “fitmodelfunc” and “combination”. If params_name is None in a wrapper, the fitter will auto-name parameters as pn1_fit, pn2_fit, … plus a trailing log_penalty for metadata only.

Parameter names in results:
• The fitter always records a numeric vector in the JSON (fit_params_values). Plotting prefers this numeric vector, independent of names.
• MG.params_dict is updated for per-name inspection but plotting does not depend on it.



9. COMMON PITFALLS AND TIPS
“Ghost files” in GUI after build:
• The build step renames an existing galaxy_general → galaxy_general_bak_YYYYMMDD_HHMMSS and immediately creates a fresh galaxy_general. Some file managers keep showing the backup’s contents until you refresh. The fresh folder contains init/.THIS_IS_FRESH; backups contain README_MOVED_FROM_galaxy_general.txt.

Make paths explicit:
• The controller copies galaxy_general.g1 from the preprocess folder into gm/ with absolute paths, so stale relative working directories cannot leak files into Gadget’s source folder.

Fail-fast on settings:
• If unified_settings.yaml is missing or malformed, the controller exits before doing heavy work. The fitter also fails fast if your YAML requests a non-existent fitting_model.

Resume semantics:
• When you pass --resume_point, the build step will not rename galaxy_general*. That is by design to avoid clobber during resumes.

MPI and performance:
• Use --n-mpi-gadget <N> to control mpirun ranks for Gadget2 (and some AA steps). Default 4.

Re-running just plotting:
• If fit results exist, you can re-run only the plotting by gating steps (start=fit_plot, until=fit_plot).



10. EXAMPLES
End-to-end for all models:
python3 workflow_wrapper.py ./initial_conditions/settings_Ein_multicomp_spinL_axisLH/ all

Only build and prepare IC for a single model name:
python3 workflow_wrapper.py ./initial_conditions/settings_Ein_multicomp_spinL_axisLH/ run --model Ein_multicomp_spinL_axisLH0 --start-step build --until-step prepare_ic

Resume from actions (module 3) for model index 0 and continue to the end:
python3 workflow_wrapper.py ./initial_conditions/settings_Ein_multicomp_spinL_axisLH/ --resume_point 3 1 --modelnumber 0

Rename current galaxy folder and continue with remaining models:
python3 workflow_wrapper.py ./initial_conditions/settings_Ein_multicomp_spinL_axisLH/ --resume_point 5 1

Compare only:
python3 workflow_wrapper.py ./initial_conditions/settings_Ein_multicomp_spinL_axisLH/ compare
(or use --start-step compare --until-step compare)

Detach:
python3 workflow_wrapper.py ./initial_conditions/settings_Ein_multicomp_spinL_axisLH/ all --detach

Stop detached run:
kill $(cat install_and_run/controller.pid)



11. GLOSSARY OF STEP NAMES (for --start-step/--until-step)

build Create/backup galaxy_general folders and write init markers.
prepare_ic Generate galaxy_general.g1 and copy per-model params into gm/.
simulate Run Gadget2; produce snapshots in gm/snapshot/.
triax Convert snapshot to txt; SCF compile; optional foci; prepare alignment.
actions AA computation (TACT/aa).
fit_plot DF fit of actions and plotting.
compare Post-run comparison and history packaging.



12. SUPPORT NOTES
• Run from install_and_run/.
• The controller auto-generates legacy text settings from your YAML each run.
• Use --no-skip-existing to force redo of steps with .done markers.
• Use --continue-on-error to keep going across snapshots/models even if one fails.
• Detach mode writes controller.nohup.log and controller.pid in install_and_run/.
• Particle types: 1 halo, 2 stellar_disk, 0 gas_disk, 3 bulge (the YAML “type” in fit.components refers to these).



End of user guide.

